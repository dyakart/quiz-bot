import os
import json
import requests
import logging
import time

# –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ dotenv –∏ –µ–≥–æ –∑–∞–≥—Ä—É–∑–∫–∏
from dotenv import find_dotenv, load_dotenv

load_dotenv(find_dotenv())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
URL = f"https://api.telegram.org/bot{TOKEN}/"

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


def get_questions():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ JSON-—Ñ–∞–π–ª–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ None, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    """
    try:
        with open('questions.json', 'r', encoding='utf-8') as file:
            questions = json.load(file)
            return questions
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return None


def send_message(chat_id, text, reply_markup=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (reply_markup), –æ–Ω–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.
    """
    url = URL + "sendMessage"
    params = {"chat_id": chat_id, "text": text}
    if reply_markup:
        params["reply_markup"] = reply_markup

    try:
        response = requests.post(url, json=params)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def start_quiz(chat_id):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å.
    """
    questions = get_questions()
    if questions:
        user_states[chat_id] = {'score': 0, 'current_question': 0, 'questions': questions}
        ask_question(chat_id)
    else:
        send_message(chat_id, "–ò–≥—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def ask_question(chat_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.
    """
    state = user_states[chat_id]
    question_index = state['current_question']
    questions = state['questions']

    if question_index >= len(questions):
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        send_message(chat_id, f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! üôÉ\n–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {state['score']} –∏–∑ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
        del user_states[chat_id]
        return

    question_data = questions[question_index]
    question_text = question_data["question"]
    options = question_data["options"]

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
    option_buttons = [{"text": option, "callback_data": option} for option in options]
    reply_markup = {"inline_keyboard": [option_buttons]}

    send_message(chat_id, question_text, reply_markup=json.dumps(reply_markup))


def handle_answer(chat_id, answer, callback_query_id):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.
    """
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º Telegram, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    url = URL + "answerCallbackQuery"
    params = {"callback_query_id": callback_query_id}
    try:
        requests.post(url, json=params)
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ callback_query: {e}")

    if chat_id not in user_states:
        send_message(chat_id, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.\n–ù–∞–ø–∏—à–∏—Ç–µ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üòÉüéÆ.")
        return

    state = user_states[chat_id]
    question_index = state['current_question']
    question_data = state['questions'][question_index]
    correct_answer = question_data['answer']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if answer == correct_answer:
        state['score'] += 1
        send_message(chat_id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ üéâ üéâ")
    else:
        send_message(chat_id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! üôÅ\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    state['current_question'] += 1
    ask_question(chat_id)


def get_updates(offset=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    url = URL + "getUpdates"
    params = {"timeout": 100, "offset": offset}
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return {"result": []}


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã.
    """
    offset = None
    while True:
        updates = get_updates(offset)
        for update in updates.get("result", []):
            offset = update["update_id"] + 1

            if "message" in update:
                message_data = update["message"]
                chat_id = message_data["chat"]["id"]

                if message_data["date"] < time.time() - 10:
                    continue

                if "text" in message_data:
                    text = message_data["text"]

                    if text == "/start":
                        send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! ‚úã\n–û—Ç–ø—Ä–∞–≤—å /quiz ‚¨áÔ∏è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!")
                    elif text == "/quiz":
                        start_quiz(chat_id)

            if "callback_query" in update:
                callback = update["callback_query"]
                callback_data = callback["data"]
                chat_id = callback["from"]["id"]
                callback_query_id = callback["id"]  # ID callback-–∑–∞–ø—Ä–æ—Å–∞
                handle_answer(chat_id, callback_data, callback_query_id)

        time.sleep(1)


if __name__ == '__main__':
    if TOKEN:
        main()
    else:
        logging.error("–£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
